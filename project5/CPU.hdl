// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    // init writeN
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // taking the instruction and inserting it or the alu output to the A regester
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=ARegInput);
    // declaring the A regester,first we want to check if we have an A-instruction or C-instruction
    // then we build the A regester
    Not(in=instruction[15], out=notInstruction);
    Or(a=instruction[5], b=notInstruction, out=AregLoad);
    ARegister(in=ARegInput, load=AregLoad, out=AregOut,out[0..14]=addressM);
    // Declaring the D regester, we get the input from ALU output, and the regester output serves as an input to the ALU
    And(a=instruction[4],b=instruction[15],out=DregLoad);
    DRegister(in=aluOut, load=DregLoad, out=DRegOut);

    Mux16(a=AregOut, b=inM, sel=instruction[12], out=mux2Out);
    // building the ALU, it takes the input from the D regester and a Mux16 output,
    // the output of the ALU is distributed for outM and the D regester and the A regester going throw Mux16
    ALU(x=DRegOut, y=mux2Out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM,out=aluOut,
    zr=zr, ng=ng);

    // checking if we need to jump
    Mux(a=false, b=ng, sel=instruction[2], out=ngjmp);
    Mux(a=false, b=zr, sel=instruction[1], out=zrJmp);
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNj);
    And(a=notZr, b=notNj, out=outPos);
    Mux(a=false, b=outPos, sel=instruction[0], out=pJmp);
    Or(a=ngjmp, b=zrJmp, out=zrNjJmp);
    Or(a=zrNjJmp, b=pJmp, out=jmp);
    And(a=instruction[15], b=jmp, out=loadPc);
    PC(in=AregOut, load=loadPc, inc=true, reset=reset, out[0..14]=pc);
}

